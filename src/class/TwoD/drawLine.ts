import Draw from '@arcgis/core/views/draw/Draw';
import Graphic from '@arcgis/core/Graphic';
import Point from '@arcgis/core/geometry/Point';
import Polyline from '@arcgis/core/geometry/Polyline';
import SimpleLineSymbol from '@arcgis/core/symbols/SimpleLineSymbol';
import * as GeometryEngine from "@arcgis/core/geometry/geometryEngine.js";
import Color from '@arcgis/core/Color';
export default function drawLine (view:any,lineLayer:any) {
  console.log(111)
  console.log(view)
  let draw = new Draw({ //¨¦?????iew¨¦??????????¡è???raw
    view: view
  })
  let action = draw.create("polyline") //¨¦????????¨¦????¡è????????¡ã?¡¦?
  view.focus()
  action.on(
    [
      "vertex-add", // when a vertex is added  ??¡ì??????¨¦????????
      "vertex-remove", // when a vertex is removed ?????????
      "cursor-update", // when the pointer moves ??¡ì?????????????¡ì?
      "draw-complete" // when the drawing is completed ??¡ì??????¨¦????????
    ],
    function(evt){
      createLine(evt.vertices,lineLayer,view)
    }
  )
}

function createLine(vertices:any,lineLayer:any,view:any) {
  lineLayer.removeAll() //?¡§????????????????????¡§????¨¦?¡§??????
  let symbol = {  //¨¦???¡ì????¨¦?????
    type: "simple-marker",
    color: [47,79,79],
    width: 0.5,
    size: 4,
    outline: {
      color: [ 0, 0, 0 ],
      width: 1  
    }
  }
  //?????????¨¦???¡ì????¨¦????????¨¦????????
  let startGraphics = new Graphic({
    geometry: new Point({
      x: vertices[0][0], //?¡è¡ã????¡ã?¨¦??????¡ì?¨¦????????¨¦?¡ì?????????????¡è?¨¦?????,¨¦????????¨¦?¡ì???????????¡è??¡èlongitude
      y: vertices[0][1], //?¡è¡ã????¡ã?¨¦??????¡ì?¨¦????????¨¦?¡ì?????????????¡è?¨¦?????,¨¦????????¨¦?¡ì???????????¡è??¡èlatitude
      spatialReference: view.spatialReference //¨¦??????¡ã?¨¦????¡ì???¨¦????????¨¦?¡ì??????¨¦?????
    }),
    symbol: symbol
  })
  
  lineLayer.add(startGraphics)
  //??????????¡§?????¡ì?¨¦????????¨¦?????
  let lineGraphics = new Graphic({
    geometry: new Polyline({
      paths: vertices,
      spatialReference: view.spatialReference
    }),
    symbol: new SimpleLineSymbol({
      style: "dash",
      color: new Color([176,196,222]),
      width: 2
    })
  });
  lineLayer.add(lineGraphics)
  
  //?¡§???????
  let linePath = []  //?????????¨¦?¡ì??????¨¦????????
  let pointStart = [] //??¡ì¨¦?????
  pointStart.push(vertices[0][0])
  pointStart.push(vertices[0][1])
  linePath.push(pointStart)

  for (let i = 1; i < vertices.length ; i++) { //¨¦????¡ã?¡¦???¡ì?????????????¡ì?¨¦?¡§??????¨¦????????¨¦?????
    let point = {
      type:"point",
      x:vertices[i][0],
      y:vertices[i][1],
      spatialReference: view.spatialReference
    };
    //??¡ì???????????????
    let mouseGraphics = new Graphic({
      geometry:point,
      symbol: symbol
    })
    let xy = [] //??¡ì???????¡è¡ã???????????????¨¦?????
    xy.push(vertices[i][0])
    xy.push(vertices[i][1])     
    linePath.push(xy)
    let line = new Polyline({ //??¡ì¨¦?????¨¦????????¨¦????????¨¦?????????????????
      paths: linePath,
      spatialReference: view.spatialReference
    })
    let length = GeometryEngine.geodesicLength(line, 'meters').toFixed(2) //?¡§???????
    let lengthText = lengthFormat(length) //¨¦?????????????????
    let textSymbol = { //?????????¨¦????¡§???
      type: "text",
      color: "white",
      haloColor: "black",
      haloSize: "2px",
      text: lengthText,
      xoffset: '50px',
      yoffset: '-5px',
      font: {
        size: 12,
        family: "sans-serif",
        weight: "bold"
      }
    }
    let textGraphics = new Graphic({ //¨¦????¡§?????????????????????¨¦????????¨¦?????
      geometry:point,
      symbol: textSymbol
    });
    //??????????¡§??????¡ã??¡ì????????????????¡§?????¡ì?¨¦????????¨¦?????
    lineLayer.addMany([textGraphics, mouseGraphics ])
  }
}

function lengthFormat(length:any) {
  if (length < 2000) {
    return  length + "¨¦?????"
  }
  else {
    length = (length/1000).toFixed(2)
    return  length + "¨¦????????"
  }
}